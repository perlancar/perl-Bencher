#!perl

# DATE
# VERSION

use 5.010001;
use strict;
use warnings;

use Bencher::Backend;
use Function::Fallback::CoreOrPP qw(clone);
use Perinci::CmdLine::Any;

our %SPEC;

$SPEC{format_result} = do {
    my $meta = clone($Bencher::Backend::SPEC{format_result});

    # currently we only use default formatters, but we will allow this
    delete $meta->{args}{formatters};

    $meta->{args}{envres}{cmdline_src} = 'stdin_or_file';

    # to avoid warning when cmdline is 'bencher-fmt FILENAME' and periga-argv
    # tries to decode FILENAME as json because it thinks envres is a data
    # structure
    $meta->{args}{envres}{schema} = 'str*';

    $meta;
};
sub format_result {
    require JSON::MaybeXS;

    my $envres = JSON::MaybeXS::decode_json($_[0]);

    [200, "OK", Bencher::Backend::format_result($envres)];
}

binmode(STDOUT, ":utf8");
Perinci::CmdLine::Any->new(url => '/main/format_result')->run;

#ABSTRACT: Format bencher result
#PODNAME:

=head1 SYNOPSIS

 % bencher -m SomeModule --json > /path/to/bencher-output.json

Later:

 % bencher-fmt < /path/to/bencher-output.json
